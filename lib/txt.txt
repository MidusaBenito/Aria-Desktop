 try {
      paymentIntent = await createPaymentIntent(paymentAmount, 'USD');
      //Payment Sheet
      await Stripe.instance
          .initPaymentSheet(
              paymentSheetParameters: SetupPaymentSheetParameters(
            paymentIntentClientSecret: paymentIntent!['client_secret'],
            // applePay: PaymentSheetApplePay(
            //merchantCountryCode: 'US',
            // ),
            googlePay: PaymentSheetGooglePay(
              merchantCountryCode: 'US',
              testEnv: true,
            ),
            style: ThemeMode.dark,
            merchantDisplayName: 'Ariaquickpay',
            allowsDelayedPaymentMethods: true,
          ))
          .then((value) {});

      ///now finally display payment sheeet
      displayPaymentSheet(context);
    } catch (e, s) {
      print('exception:$e$s');
    }
  }

  displayPaymentSheet(context) async {
    try {
      await Stripe.instance.presentPaymentSheet().then((value) async {
        //print(value);

        //save payment details
        final my_url = myurls.AriaApiEndpoints.topUpAriaWallet;
        final userToken = UserSimplePreferences.getUserToken() ?? '';
        var saveResponse = await widget.client.post(
          Uri.parse(my_url),
          headers: {
            HttpHeaders.authorizationHeader: 'Token $userToken',
          },
          body: {
            //'product_id': bill_id,
            //'first_name': first_name,
            //'last_name': last_name,
            //'account_for_bill': billing_account_number,
            'amount_total': calculateAmount(paymentAmount),
          },
        );
        if (saveResponse.statusCode == 200) {
          showDialog(
              context: context,
              builder: (_) => AlertDialog(
                    content: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Row(
                          children: const [
                            Icon(
                              Icons.check_circle,
                              color: Colors.green,
                            ),
                            Text(" Wallet Topup Successful"),
                          ],
                        ),
                      ],
                    ),
                  )).then((val) {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) {
                  return ariaWallet(client: widget.client);
                },
              ),
            );
          });
        } //end if
        // ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text("paid successfully")));

        paymentIntent = null;
      }).onError((error, stackTrace) {
        print('Error is:--->$error $stackTrace');
      });
    } on StripeException catch (e) {
      print('Error is:---> $e');
      showDialog(
          context: context,
          builder: (_) => const AlertDialog(
                content: Text("Cancelled "),
              ));
    } catch (e) {
      print('$e');
    }
  }

  createPaymentIntent(String amount, String currency) async {
    try {
      String userEmail = UserSimplePreferences.getUserEmail() ?? '';
      Map<String, dynamic> body = {
        'amount': calculateAmount(amount),
        'currency': currency,
        'payment_method_types[]': 'card',
        'description': 'Topping up Aria Wallet using card from aria mobile app',
        //'email': userEmail,
        //"payment_method_options": "",
        'metadata[email]': userEmail,
        //'metadata[product_id]': bill_id,
        //'metadata[last_name]': last_name,
        //'metadata[first_name]': first_name,
        //'metadata[account_billed_to]': billing_account_number,
        'metadata[payment_method]': 'card',
        'metadata[payment_type]': 'card_bill_pay',

        //'payment_method_types': ['card'],
      };

      var response = await http.post(
        Uri.parse('https://api.stripe.com/v1/payment_intents'),
        headers: {
          'Authorization': 'Bearer $SECRET_KEY',
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: body,
      );
      // ignore: avoid_print
      print('Payment Intent Body->>> ${response.body.toString()}');
      return jsonDecode(response.body);
    } catch (err) {
      // ignore: avoid_print
      print('err charging user: ${err.toString()}');
    }
  }